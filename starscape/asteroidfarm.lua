--Go to an asteroid field and run the script, sorts by distance and material worth, can be canceled anytime using CancelKey (Backspace)

RunService = game:GetService("RunService")
UserInputService = game:GetService("UserInputService")

FlyingSpeed = 140
UsingMiner = false
CancelKey = Enum.KeyCode.Backspace
AutoCollect = true

Me = game.Players.LocalPlayer
Character = Me.Character
Ship = workspace.Ships:WaitForChild(Me.Name):GetChildren()[1]
Hitbox = Ship:WaitForChild("Hitbox")
Gyro = Ship.PrimaryPart:WaitForChild("BodyGyro")
Velocity = Ship.PrimaryPart:WaitForChild("BodyVelocity")
RaycastParams = RaycastParams.new()
RaycastParams.FilterType = Enum.RaycastFilterType.Whitelist

Importance = {"Korrelite", "Reknite", "Gellium", "Axnit", "Narcor", "Unknown"}

Colors = {
	Korrelite = {BrickColor.new("Quill grey"), BrickColor.new("Institutional white"), BrickColor.new("Pearl")},
	Reknite = {BrickColor.new("Neon orange"), BrickColor.new("Dark orange")},
	Gellium = {BrickColor.new("Sea green")},
	Axnit = {BrickColor.new("Crimson")},
	Narcor = {BrickColor.new("Tr. Blue")}
}

Canceled = false

function Assert(bool, arg)
	if not bool then warn(arg) end
end

function getAsteroidType(asteroid)
	local mineral = asteroid:FindFirstChild("Mineral")
	if not mineral then return end
	
	for name, data in pairs (Colors) do
		for i, color in pairs (data) do
			if mineral.BrickColor == color then
				return name, i
			end
		end
	end
	
	return "Unknown", 1
end

function getAsteroids(parent, typeFilter, found)
	found = found or {}
	
	for _, v in pairs (parent:GetChildren()) do
		if v.Name == "Asteroid" then
			local asteroidType = getAsteroidType(v)
			if asteroidType then
				local distance = (v.PrimaryPart.Position - Ship.PrimaryPart.Position).magnitude
				if distance < 5000 and ((typeFilter and asteroidType == typeFilter) or not typeFilter) then
					table.insert(found, v)
				end
			end
		else
			getAsteroids(v, typeFilter, found)
		end
	end
	
	return found
end

function setAstroidCollision(instance, cancollide)
	for _, child in pairs (instance:GetChildren()) do
		if child:IsA("BasePart") then
			child.CanCollide = cancollide
		else
			setAstroidCollision(child, cancollide)
		end
	end
end

function getAsteroidDock(asteroid)
	RaycastParams.FilterDescendantsInstances = {asteroid}
	local distance = (Ship.PrimaryPart.Position - asteroid.PrimaryPart.Position).magnitude
	local direction = CFrame.new(Ship.PrimaryPart.Position, asteroid.PrimaryPart.Position)
	local raycastResult = workspace:Raycast(Ship.PrimaryPart.Position, direction.LookVector * (distance + 50), RaycastParams)
	
	if raycastResult and raycastResult.Instance then
		return raycastResult.Position
	end
end

function moveTo(position)
	while Ship.Parent and not Canceled do
		local distance = (Character.PrimaryPart.Position - position).magnitude
		if distance <= ((UsingMiner and 20) or 30) then break end
		
		Gyro.CFrame = CFrame.new(Ship.PrimaryPart.Position, position)
		Velocity.Velocity = Ship.PrimaryPart.CFrame.LookVector * FlyingSpeed
		
		RunService.Stepped:Wait()
	end
	
	Velocity.Velocity = Vector3.new(0, 0, 0)
end

function mineAsteroid(asteroid)
	mouse1press()
	
	while Ship.Parent and asteroid.Parent and not Canceled do
		Gyro.CFrame = CFrame.new(Ship.PrimaryPart.Position, asteroid.PrimaryPart.Position)
		RunService.Stepped:Wait()
	end
	
	mouse1release()
end

function onAsteroidFragment(ore)
	wait(0.1)
    local distance = (ore.Position - Hitbox.Position).magnitude
    
    while ore.Parent and distance <= 2000 do
        distance = (ore.Position - Hitbox.Position).magnitude
        
        firetouchinterest(ore, Hitbox, 1)
        wait(0.1)
        firetouchinterest(ore, Hitbox, 0)
        
        RunService.Stepped:Wait()
    end
end

Assert(pcall(function()
	local oreAddedEvent = nil
	if AutoCollect then
		oreAddedEvent = workspace.Ores.ChildAdded:Connect(onAsteroidFragment)
	end
	local cancelEvent = nil
	cancelEvent = UserInputService.InputBegan:Connect(function(input, processed)
		if processed then return end
		
		if input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode == CancelKey then
			Canceled = true
			if oreAddedEvent then oreAddedEvent:Disconnect() end
			cancelEvent:Disconnect()
			print("Canceled miner")
		end
	end)
	
	print("Searching for asteroids")
	local asteroids = getAsteroids(workspace)
	print("Found", #asteroids, "asteroids")
	table.sort(asteroids, function(a, b)
		local aType = getAsteroidType(a)
		local bType = getAsteroidType(b)
		
		aPriority = table.find(Importance, aType)
		bPriority = table.find(Importance, bType)
		
		local distSort = Me:DistanceFromCharacter(a.PrimaryPart.Position) < Me:DistanceFromCharacter(b.PrimaryPart.Position)
		
		return aPriority > bPriority or distSort
	end)
	
	while not iswindowactive() do
		RunService.Stepped:Wait()
	end

	for _, asteroid in pairs (asteroids) do
		if not Ship.Parent or Canceled then break end
		
		if asteroid.Parent then
			local dock = getAsteroidDock(asteroid)
			if dock then
				print("Docking asteroid")
				setAstroidCollision(asteroid, false)
				moveTo(dock)
				if Canceled then return end
				print("Mining asteroid, Material:", getAsteroidType(asteroid), asteroid.Mineral.BrickColor)
				mineAsteroid(asteroid)
				print("Mined asteroid")
			else
				print("Failed to dock asteroid")
			end
		end
		
		wait(1)
	end

	print("Done mining")
end))